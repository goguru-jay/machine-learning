What is the Dataframe?

Dataframe is part of the Pandas module. It allows you to store and manipulate tabular data in rows and columns of variables.

In the real world, a Pandas DataFrame will be created by loading the datasets from existing storage, storage can be SQL Database, CSV file, and Excel file. 

Pandas DataFrame can be created from the lists, dictionary, and from a list of dictionary etc.


Titanic Dataset related queries via df

Assumptions:
I am going to use interactive python for this exercise

I will import library pandas as I need to read the csv file. The csv file is located at F:/tech/python/eclipse-workspace/pyproj1/dataset/titanic.csv

If you have python installed on your computer (my python version is 3.8), just type python from the command prompt. I am assuming you have python executable added to your system PATH.

F:/tech/python/eclipse-workspace/pyproj1> python
Python 3.8.3 (tags/v3.8.3:6f8c832, May 13 2020, 22:37:02) [MSC v.1924 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>>

import pandas as pd
df = pd.read_csv('F:/tech/python/eclipse-workspace/pyproj1/dataset/titanic.csv')

(The above statements loads the library and read the entire csv file into a dataframe object)


1) How do I find the number of rows and columns in the dataset

Below command gives you the number of rows and columns in the dataset

>>> df.shape
(891, 12)

If you only need the number of rows, you can use either of the commands

>>> len(df)
891


>>> df.shape[0]
891

2) How do I list all the column names in the dataset

>>> df.columns

Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',
       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],
      dtype='object')
	  
3) Show me a sample of the dataset for visualization

The following python statement will display the top 5 rows

>>> df.head()

   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked
0            1         0       3  ...   7.2500   NaN         S
1            2         1       1  ...  71.2833   C85         C
2            3         1       3  ...   7.9250   NaN         S
3            4         1       1  ...  53.1000  C123         S
4            5         0       3  ...   8.0500   NaN         S

[5 rows x 12 columns]

If you want to display the top 10 or 25 rows, the you enter the number of rows you want as in below command

>>> df.head(10)

   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked
0            1         0       3  ...   7.2500   NaN         S
1            2         1       1  ...  71.2833   C85         C
2            3         1       3  ...   7.9250   NaN         S
3            4         1       1  ...  53.1000  C123         S
4            5         0       3  ...   8.0500   NaN         S
5            6         0       3  ...   8.4583   NaN         Q
6            7         0       1  ...  51.8625   E46         S
7            8         0       3  ...  21.0750   NaN         S
8            9         1       3  ...  11.1333   NaN         S
9           10         1       2  ...  30.0708   NaN         C

[10 rows x 12 columns]


4) Show me the types of data in the dataframe (like integers, floats, strings etc)

>>> df.describe()

       PassengerId    Survived      Pclass         Age       SibSp       Parch        Fare
count   891.000000  891.000000  891.000000  714.000000  891.000000  891.000000  891.000000
mean    446.000000    0.383838    2.308642   29.699118    0.523008    0.381594   32.204208
std     257.353842    0.486592    0.836071   14.526497    1.102743    0.806057   49.693429
min       1.000000    0.000000    1.000000    0.420000    0.000000    0.000000    0.000000
25%     223.500000    0.000000    2.000000   20.125000    0.000000    0.000000    7.910400
50%     446.000000    0.000000    3.000000   28.000000    0.000000    0.000000   14.454200
75%     668.500000    1.000000    3.000000   38.000000    1.000000    0.000000   31.000000
max     891.000000    1.000000    3.000000   80.000000    8.000000    6.000000  512.329200

Note that the above command only describes the details of integer and float columns and ignores the string columns like name, sex, ticket, cabin, embarked etc. It gives you a lot of interesting details like the minimum, maximum, mean, standard deviation, 25% quartile, 50% quartile, 75% quartile, and number of values in each column.

You can observe that Age only shows a count of 714 whereas all the the other columns show a count of 891. This means there are some missing values (actually 177 missing) in column Age

5) How do I display a certain range of rows (say 10 to 20)

You can use the 'iloc' function on the dataframe object to display rows by row numbers. The range 10:21 is also referred as slicing the dataset

>>> df.iloc[10:21]

    PassengerId  Survived  Pclass                                               Name  ...     Ticket     Fare  Cabin  Embarked
10           11         1       3                    Sandstrom, Miss. Marguerite Rut  ...    PP 9549  16.7000     G6         S
11           12         1       1                           Bonnell, Miss. Elizabeth  ...     113783  26.5500   C103         S
.
.
19           20         1       3                            Masselmani, Mrs. Fatima  ...       2649   7.2250    NaN         C
20           21         0       2                               Fynney, Mr. Joseph J  ...     239865  26.0000    NaN         S

[11 rows x 12 columns]

6) How do I display the last 10 rows only?

The below command with the range [-10:] says, starting from the 10 rows from the last, till the end [:].

>>> df.iloc[-10:]

     PassengerId  Survived  Pclass                                      Name  ...            Ticket     Fare  Cabin  Embarked
881          882         0       3                        Markun, Mr. Johann  ...            349257   7.8958    NaN         S
882          883         0       3              Dahlberg, Miss. Gerda Ulrika  ...              7552  10.5167    NaN         S
.
.
889          890         1       1                     Behr, Mr. Karl Howell  ...            111369  30.0000   C148         C
890          891         0       3                       Dooley, Mr. Patrick  ...            370376   7.7500    NaN         Q

[10 rows x 12 columns]

7) As you can see, you don't want to see all the columns as it does not allow you to focus much. What if I want to run the above command but only look at Name, Sex, Age, and Survivied columns

There are multiple ways to get the same results. Here they are:

>>> df.iloc[-10:,[3,5,4,1]]

(or) 

>>> df.iloc[-10:][['Name','Age','Sex','Survived']]

(or)

>>> df[['Name','Age','Sex','Survived']][-10:]

                                         Name   Age     Sex  Survived
881                        Markun, Mr. Johann  33.0    male         0
882              Dahlberg, Miss. Gerda Ulrika  22.0  female         0
883             Banfield, Mr. Frederick James  28.0    male         0
884                    Sutehall, Mr. Henry Jr  25.0    male         0
885      Rice, Mrs. William (Margaret Norton)  39.0  female         0
886                     Montvila, Rev. Juozas  27.0    male         0
887              Graham, Miss. Margaret Edith  19.0  female         1
888  Johnston, Miss. Catherine Helen "Carrie"   NaN  female         0
889                     Behr, Mr. Karl Howell  26.0    male         1
890                       Dooley, Mr. Patrick  32.0    male         0

Note: A lot of folks miss the double '[[' and ']]' and only type a single '[' and ']' when running this command. If you do so, you will get a friendly KeyError

8) How can I get the count of males and females?

>>> df['Sex'].value_counts()

male      577
female    314

9) How can I find the total number of survivors?

We know that column Survived has the value 1 for survivors. Based on this, we can use the below statement

>>> df['Survived'].value_counts()
0    549
1    342

or 

>>> df[df['Survived'] == 1][['Survived']].count()

Survived    342

10) How can I find the total number of female survivors?

>>> df[ (df['Survived'] == 1) & (df['Sex'] == 'female') ][['Survived']].count()

Survived    233

11) How do I find the male/female survived count using the group by function?

>>> df[['Sex','Survived']].groupby(['Sex']).sum()

        Survived
Sex
female       233
male         109


12) What is the average age of the female survivors?

>>> df[ (df['Survived'] == 1) & (df['Sex'] == 'female') ][['Age']].mean()
Age    28.847716

13) Can I get all the names and age of the men who travelled in first class but did not survive, sorted by age?

>>> df[ (df['Survived'] == 0) & (df['Sex'] == 'male') ][['Name', 'Age']].sort_values(by='Age')
                                Name  Age
164     Panula, Master. Eino Viljami  1.0
386  Goodwin, Master. Sidney Leonard  1.0
7     Palsson, Master. Gosta Leonard  2.0
824     Panula, Master. Urho Abraham  2.0
16              Rice, Master. Eugene  2.0
..                               ...  ...
837              Sirota, Mr. Maurice  NaN
846         Sage, Mr. Douglas Bullen  NaN
859                 Razi, Mr. Raihed  NaN
868      van Melkebeke, Mr. Philemon  NaN
878               Laleff, Mr. Kristo  NaN

[468 rows x 2 columns]

14) Notice the above output, also included the columns for which age is not present. You can remove them from your output using the 'dropna' function

>>> df[ (df['Survived'] == 0) & (df['Sex'] == 'male') ][['Name', 'Age']].sort_values(by='Age').dropna()
                                Name   Age
164     Panula, Master. Eino Viljami   1.0
386  Goodwin, Master. Sidney Leonard   1.0
7     Palsson, Master. Gosta Leonard   2.0
..                               ...   ...
493          Artagaveytia, Mr. Ramon  71.0
96         Goldschmidt, Mr. George B  71.0
851              Svensson, Mr. Johan  74.0

[360 rows x 2 columns]

15) Find the traveling class of passengers (PClass column) that survivied the most along with the other class passengers too

>>> df[ df['Survived'] == 1 ]['Pclass'].value_counts(sort=True, ascending=False)

1    136
3    119
2     87

BONUS:

16) What count of passengers did not have Age recorded?

>>> df[['Age']].isna().sum()

Age    177

17) Can I replace the na values in age with the mean of age?

First, to check the mean of age, use the below statement

>>> df[['Age']].mean()

Age    29.699118

Now, use the below statement to replace the na values with the mean

>>> df[['Age']].fillna(df.mean())
           Age
0    22.000000
1    38.000000
2    26.000000
3    35.000000
4    35.000000
..         ...
886  27.000000
887  19.000000
888  29.699118
889  26.000000
890  32.000000

Finally, double check if there are any na values in Age

>>> df[['Age']].fillna(df.mean()).isna().sum()

Age    0

Things you can try on the dataframe
1) Calculate the total fare paid by survivors and non-survivors
2) Find out the name of the passengers who paid more than the average fare
3) Find out the oldest male and female traveler
4) Can you group the passengers by Embarked column (values S,C,Q) and get a count of each code? If there are any nulls, how do you plan to replace those values?
